/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package classesinjava;
import java.awt.Color;
import java.awt.*;
import java.util.ArrayList;
import java.util.*;
import javax.swing.*;
import java.io.*;
import java.nio.file.spi.FileTypeDetector;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.simple.*;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
/**
 *
 * @author Grezer
 */
public class NewJFrame extends javax.swing.JFrame {
    
    Point start;
    ArrayList<Figure> listOfFigures = new ArrayList<Figure>();
    
       
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        jRadioButton1.setActionCommand("Circle");
        jRadioButton2.setActionCommand("Rectangle");
        jRadioButton3.setActionCommand("Rhombus");
        jRadioButton4.setActionCommand("Parallelogram");
        jRadioButton5.setActionCommand("Triangle");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel1MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 486, Short.MAX_VALUE)
        );

        jButton2.setText("Сlear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("-");

        jLabel6.setText("-");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setLabel("Circle");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setLabel("Rectangle");

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setLabel("Rhombus");

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setActionCommand("фыв");
        jRadioButton4.setLabel("Parallelogram");

        buttonGroup1.add(jRadioButton5);
        jRadioButton5.setLabel("Triangle");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Load");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton2)
                            .addComponent(jRadioButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButton3)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton5))
                            .addComponent(jRadioButton4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jRadioButton1)
                            .addComponent(jRadioButton3)
                            .addComponent(jRadioButton5)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton2)
                            .addComponent(jRadioButton4)
                            .addComponent(jLabel6)
                            .addComponent(jButton3)))
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        listOfFigures.removeAll(listOfFigures);
        jPanel1.removeAll();
        jPanel1.repaint(); 
        jLabel5.setText("-");
        jLabel6.setText("-");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        start = new Point(evt.getX(), evt.getY());          
        jLabel5.setText("-");
        jLabel6.setText("-");
    }//GEN-LAST:event_jPanel1MousePressed

    private void jPanel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseReleased
        Graphics g = this.jPanel1.getGraphics(); 
        String nowFigure  = buttonGroup1.getSelection().getActionCommand();
        int countOfFigures = 0;        
        for (int i = 0; i < listOfFigures.size(); i++) 
            if (listOfFigures.get(i).type == nowFigure)
                countOfFigures++;
                   
        switch(nowFigure) {
            case "Circle":
                Circle cir = new Circle((int)Math.min(start.getX(), evt.getX()), 
                                (int)Math.min(start.getY(), evt.getY()),
                                (int)Math.abs(start.getX() - evt.getX()), 
                                (int)Math.abs(start.getY() - evt.getY()));
                jLabel5.setText("Perimetr: " + cir.getPerimeter());
                jLabel6.setText("Area: " + cir.getArea());  
                listOfFigures.add(cir);                
            break;            
            case "Rectangle":
                Rectangle rec = new Rectangle((int)Math.min(start.getX(), evt.getX()), 
                                (int)Math.min(start.getY(), evt.getY()),
                                (int)Math.abs(start.getX() - evt.getX()), 
                                (int)Math.abs(start.getY() - evt.getY()));
                jLabel5.setText("Perimetr: " + rec.getPerimeter());
                jLabel6.setText("Area: " + rec.getArea()); 
                listOfFigures.add(rec);  
            break;
            case "Rhombus":
                Rhombus rmb = new Rhombus((int)Math.min(start.getX(), evt.getX()), 
                                (int)Math.min(start.getY(), evt.getY()),
                                (int)Math.abs(start.getX() - evt.getX()), 
                                (int)Math.abs(start.getY() - evt.getY()));
                jLabel5.setText("Perimetr: " + rmb.getPerimeter());
                jLabel6.setText("Area: " + rmb.getArea()); 
                listOfFigures.add(rmb);                  
            break;
            case "Parallelogram":
                Parallelogram par = new Parallelogram((int)Math.min(start.getX(), evt.getX()), 
                                (int)Math.min(start.getY(), evt.getY()),
                                (int)Math.abs(start.getX() - evt.getX()), 
                                (int)Math.abs(start.getY() - evt.getY()));
                jLabel5.setText("Perimetr: " + par.getPerimeter());
                jLabel6.setText("Area: " + par.getArea());
                listOfFigures.add(par);                 
            break;
            case "Triangle":
                Triangle tri = new Triangle((int)Math.min(start.getX(), evt.getX()), 
                                (int)Math.min(start.getY(), evt.getY()),
                                (int)Math.abs(start.getX() - evt.getX()), 
                                (int)Math.abs(start.getY() - evt.getY()));
                jLabel5.setText("Perimetr: " + tri.getPerimeter());
                jLabel6.setText("Area: " + tri.getArea());     
                listOfFigures.add(tri);  
            break;
          default:           
        }          
        for (Figure i:listOfFigures) 
            i.draw(g);
    }//GEN-LAST:event_jPanel1MouseReleased

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        Graphics g = this.jPanel1.getGraphics(); 
        String nowFigure  = buttonGroup1.getSelection().getActionCommand();     
        jPanel1.removeAll();
        jPanel1.repaint(); 
        for (Figure i:listOfFigures) 
           i.draw(g); 

        switch(nowFigure) {
            case "Circle":
                Circle cir = new Circle((int)Math.min(start.getX(), evt.getX()), 
                                (int)Math.min(start.getY(), evt.getY()),
                                (int)Math.abs(start.getX() - evt.getX()), 
                                (int)Math.abs(start.getY() - evt.getY()));
                cir.draw(g);
                jLabel5.setText("Perimetr: " + cir.getPerimeter());
                jLabel6.setText("Area: " + cir.getArea());  
            break;            
            case "Rectangle":
                Rectangle rec = new Rectangle((int)Math.min(start.getX(), evt.getX()), 
                                (int)Math.min(start.getY(), evt.getY()),
                                (int)Math.abs(start.getX() - evt.getX()), 
                                (int)Math.abs(start.getY() - evt.getY()));
                rec.draw(g);
                jLabel5.setText("Perimetr: " + rec.getPerimeter());
                jLabel6.setText("Area: " + rec.getArea());
            break;
            case "Rhombus":
                Rhombus rmb = new Rhombus((int)Math.min(start.getX(), evt.getX()), 
                                (int)Math.min(start.getY(), evt.getY()),
                                (int)Math.abs(start.getX() - evt.getX()), 
                                (int)Math.abs(start.getY() - evt.getY()));
                rmb.draw(g);
                jLabel5.setText("Perimetr: " + rmb.getPerimeter());
                jLabel6.setText("Area: " + rmb.getArea()); 
            break;
            case "Parallelogram":
                Parallelogram par = new Parallelogram((int)Math.min(start.getX(), evt.getX()), 
                                (int)Math.min(start.getY(), evt.getY()),
                                (int)Math.abs(start.getX() - evt.getX()), 
                                (int)Math.abs(start.getY() - evt.getY()));
                par.draw(g);
                jLabel5.setText("Perimetr: " + par.getPerimeter());
                jLabel6.setText("Area: " + par.getArea());
            break;
            case "Triangle":
                Triangle tri = new Triangle((int)Math.min(start.getX(), evt.getX()), 
                                (int)Math.min(start.getY(), evt.getY()),
                                (int)Math.abs(start.getX() - evt.getX()), 
                                (int)Math.abs(start.getY() - evt.getY()));
                tri.draw(g);
                jLabel5.setText("Perimetr: " + tri.getPerimeter());
                jLabel6.setText("Area: " + tri.getArea()); 
            break;
          default:           
        }  
    }//GEN-LAST:event_jPanel1MouseDragged

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        //Супер костыль, что бы нормально рисовалось
        //Можешь закоментить и посмотреть чё будет
        Graphics g = this.jPanel1.getGraphics(); 
        for (Figure i:listOfFigures) 
           i.draw(g); 
    }//GEN-LAST:event_jPanel1MouseMoved

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JSONObject objectFigure = new JSONObject();
        int iterator = 0;
        for (Figure i:listOfFigures) {
            JSONArray figureJSON = new JSONArray();
            figureJSON.add("x: " + i.x);
            figureJSON.add("y: " + i.y);
            figureJSON.add("height: " + i.height);
            figureJSON.add("width: " + i.width);
            figureJSON.add("type: " + i.type);      
            objectFigure.put("Figure " + iterator + ": ", figureJSON);
            iterator++;
        }           
        JFileChooser fileChooser = new  JFileChooser();
        fileChooser.setDialogTitle("Save file");    
        fileChooser.setFileFilter(new FileTypeFilter(".json", "JSON format"));
        int result = fileChooser.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION){
            File file = fileChooser.getSelectedFile();
            try{            
                if(!file.exists()) 
                    file.createNewFile();
                PrintWriter pw = new PrintWriter(file);
                pw.print(objectFigure.toJSONString());
                pw.close();
            } catch(Exception e) { }  
        }   
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int ret = fileChooser.showDialog(null, "Open File");                
        if (ret == JFileChooser.APPROVE_OPTION) {
            listOfFigures.removeAll(listOfFigures);
            File file = fileChooser.getSelectedFile();  
            JSONParser parser = new JSONParser();
            int x = 111;
            try (FileReader reader = new FileReader(file))
            {
                Object obj = parser.parse(reader);
                JSONObject rootElement = (JSONObject) obj;
                for (int numFigure = 0; x < rootElement.size(); numFigure++) {
                    int newX = 0;
                    int newY = 0;
                    int newWidth = 0;
                    int newHight = 0;
                    String newType = "";   
                    JSONArray figureJSON = (JSONArray) rootElement.get("Figure " + numFigure + ": ");  
                    Iterator properties = figureJSON.iterator();
                    while (properties.hasNext()) {
                        String test = (String) properties.next();
                        if(test.charAt(0) == 'x') 
                            newX = Integer.parseInt(test.split(" ")[1]); 
                        if(test.charAt(0) == 'y') 
                            newY = Integer.parseInt(test.split(" ")[1]);
                        if(test.charAt(0) == 'h') 
                            newHight = Integer.parseInt(test.split(" ")[1]);
                        if(test.charAt(0) == 'w') 
                            newWidth = Integer.parseInt(test.split(" ")[1]);
                        if(test.charAt(0) == 't') 
                            newType = test.split(" ")[1];                                                   
                    }
                    // add to list
                    switch(newType) {
                        case "Circle":
                            Circle cir = new Circle(newX, newY, newWidth, newHight); 
                            listOfFigures.add(cir);
                        break;            
                        case "Rectangle":
                            Rectangle rec = new Rectangle(newX, newY, newWidth, newHight);
                            listOfFigures.add(rec);
                        break;
                        case "Rhombus":
                            Rhombus rmb = new Rhombus(newX, newY, newWidth, newHight);
                            listOfFigures.add(rmb);
                        break;
                        case "Parallelogram":
                            Parallelogram par = new Parallelogram(newX, newY, newWidth, newHight);
                            listOfFigures.add(par);
                        break;
                        case "Triangle":
                            Triangle tri = new Triangle(newX, newY, newWidth, newHight);
                            listOfFigures.add(tri);
                        break;
                      default:           
                    }
                }                 
            } catch (Exception e) { System.out.println(e.getMessage()); }
            jPanel1.removeAll();
            jPanel1.repaint(); 
            for (Figure i:listOfFigures) 
                i.draw(this.jPanel1.getGraphics());
        }
    }//GEN-LAST:event_jButton3ActionPerformed
   
        
    private static void parseEmployeeObject(JSONObject employee)
    {
        //Get employee object within list
        JSONObject figureObject = (JSONObject) employee.get("Figure 1");
         
        //Get employee first name
        String x = (String) figureObject.get("x");   
        System.out.println(x);
         
        //Get employee last name
        String y = (String) figureObject.get("y"); 
        System.out.println(y);
       
    }
        
    
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    // End of variables declaration//GEN-END:variables
}
